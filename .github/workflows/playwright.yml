# name: Playwright Tests

# on:
#   push:
#     branches:
#       - main

# jobs:
#   build-and-test:
#     runs-on: ubuntu-latest

#     steps:
#     - name: Checkout repository
#       uses: actions/checkout@v2

#     - name: Setup .NET
#       uses: actions/setup-dotnet@v2
#       with:
#         dotnet-version: 8.0.x
#         include-prerelease: true

#     - name: Install workloads
#       run: dotnet workload restore src/DotnetWasm.csproj

#     - name: Build DotnetWasm project
#       run: dotnet build -c Release src/DotnetWasm.csproj

#     # - name: Install dotnet-serve
#     #   run: dotnet tool install dotnet-serve --global

#     # - name: Set the value
#     #   id: step_one
#     #   run: |
#     #     echo "DOTNET_SERVE_PORT=8080" >> "$GITHUB_ENV"

#     # - name: Serve DotnetWasm project
#     #   run: |
#     #     dotnet serve -p $DOTNET_SERVE_PORT -d:src/bin/Release/net8.0/browser-wasm/AppBundle/ &
#     #     echo "DotnetWasm server is running in the background."

#     - name: Start Python HTTP server
#       run: python3 -m http.server 8080 --directory src/bin/Release/net8.0/browser-wasm/AppBundle/ &

#     - name: Build and Install PlaywrightTests
#       run: |
#         dotnet build -c Release test/PlaywrightTests.csproj
#         pwsh test/bin/Release/net8.0/playwright.ps1 install

#     - name: Run PlaywrightTests
#       run: dotnet test test/PlaywrightTests.csproj --filter FullyQualifiedName~PlaywrightTests --configuration Release --collect:"XPlat Code Coverage"

#       env:
#         DOTNET_CLI_TELEMETRY_OPTOUT: true
#         DOTNET_ROOT: /home/runner/.dotnet




name: DotnetWasm CI

on:
  push:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      python-server:
        image: python:3
        ports:
          - 8080/tcp
        options: --entrypoint "/bin/sh"

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '8.0.x'
        include-prerelease: true

    - name: Install workloads
      run: dotnet workload restore src/DotnetWasm.csproj

    - name: Build DotnetWasm project
      run: dotnet build -c Release src/DotnetWasm.csproj

    - name: Set the value
      id: step_one
      run: |
        echo "DOTNET_SERVE_PORT=5053" >> "$GITHUB_ENV"

    - name: Start Python HTTP server
      # run: nohup python3 -m http.server $DOTNET_SERVE_PORT --directory src/bin/Release/net8.0/browser-wasm/AppBundle/
      run: |
        nohup python3 -m http.server $DOTNET_SERVE_PORT --directory src/bin/Release/net8.0/browser-wasm/AppBundle/ >/dev/null 2>&1 &
        echo "Python server is running in the background."

    - name: Set environment variable for Python server URL
      run: echo "export PYTHON_SERVER_URL=http://127.0.0.1:$DOTNET_SERVE_PORT" >> $GITHUB_ENV

  run-tests:
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '8.0.x'
        include-prerelease: true

    # - name: Wait for Python HTTP server to start
    #   run: sleep 5  # Adjust the duration based on your project's startup time

    - name: Build and Install PlaywrightTests
      run: |
        dotnet build -c Release test/PlaywrightTests.csproj
        pwsh test/bin/Release/net8.0/playwright.ps1 install
        echo "Python server URL: $PYTHON_SERVER_URL"

    - name: Run PlaywrightTests
      run: |
        dotnet test test/PlaywrightTests.csproj --filter FullyQualifiedName~PlaywrightTests --configuration Release --collect:"XPlat Code Coverage"


